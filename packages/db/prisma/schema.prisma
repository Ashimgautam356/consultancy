generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Admin {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String   @unique
  passwordHash String
  phone        String
  role         Role     @default(ADMIN)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  address      String?
}

model Blog {
  id          Int       @id @default(autoincrement())
  title       String
  content     String
  authorId    Int
  tags        String?
  publishedAt DateTime  @default(now())
  views       Int       @default(0)
  likes       Int       @default(0)
  User        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  Comment     Comment[]
}

model Chat {
  id              Int               @id @default(autoincrement())
  chatType        ChatType
  createdAt       DateTime          @default(now())
  adminId         Int
  roomLink        String            @unique
  chatName        String            @default("Untitled Chat")
  image           String?
  User            User              @relation(fields: [adminId], references: [id])
  ChatParticipant ChatParticipant[]
  Message         Message[]
}

model ChatParticipant {
  chatId Int
  userId Int
  Chat   Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([chatId, userId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  blogId    Int
  userId    Int
  text      String
  createdAt DateTime @default(now())
  Blog      Blog     @relation(fields: [blogId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Countries {
  id           Int            @id @default(autoincrement())
  country      String         @unique
  Universities Universities[]
}

model Document {
  id           Int            @id @default(autoincrement())
  userId       Int
  documentType String
  status       DocumentStatus @default(PENDING)
  uploadedAt   DateTime       @default(now())
  User         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Employee {
  id           Int      @id @default(autoincrement())
  firstName    String
  lastName     String
  email        String   @unique
  passwordHash String
  phone        String
  role         Role     @default(EMPLOYEE)
  createdAt    DateTime @default(now())
  updatedAt    DateTime
  address      String?
}

model LiveSession {
  id                     Int                      @id @default(autoincrement())
  title                  String
  description            String
  hostId                 Int
  sessionDate            DateTime
  duration               Int                      @default(60)
  status                 SessionStatus            @default(UPCOMING)
  recordingUrl           String?
  createdAt              DateTime                 @default(now())
  User                   User                     @relation(fields: [hostId], references: [id], onDelete: Cascade)
  LiveSessionParticipant LiveSessionParticipant[]
}

model LiveSessionParticipant {
  sessionId   Int
  userId      Int
  LiveSession LiveSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  User        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([sessionId, userId])
}

model Message {
  id        Int      @id @default(autoincrement())
  chatId    Int
  senderId  Int
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  Chat      Chat     @relation(fields: [chatId], references: [id], onDelete: Cascade)
  User      User     @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Payment {
  id            Int           @id @default(autoincrement())
  userId        Int
  amount        Decimal
  currency      String        @default("USD")
  paymentMethod PaymentMethod
  transactionId String        @unique
  status        String        @default("PENDING")
  createdAt     DateTime      @default(now())
  User          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Student {
  id                 Int           @id @default(autoincrement())
  firstName          String
  lastName           String
  email              String        @unique
  passwordHash       String
  phone              String?
  countryOfInterest  String?
  subscriptionExpiry DateTime?
  role               Role          @default(STUDENT)
  paymentStatus      PaymentStatus @default(PENDING)
  profileCompleted   Boolean       @default(false)
  createdAt          DateTime      @default(now())
  updatedAt          DateTime      @updatedAt
  address            String?
}

model Testimonial {
  id         Int      @id @default(autoincrement())
  userId     Int
  country    String
  university String
  text       String
  photoUrl   String?
  approved   Boolean  @default(false)
  createdAt  DateTime @default(now())
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Universities {
  id        Int       @id @default(autoincrement())
  countryId Int
  name      String    @unique
  Countries Countries @relation(fields: [countryId], references: [id])
}

model User {
  id                     Int                      @id @default(autoincrement())
  name                   String
  email                  String                   @unique
  role                   Role                     @default(STUDENT)
  imgPublicId            String?
  imgUrl                 String?
  token                  String?

  Blog                   Blog[]
  Chat                   Chat[]
  ChatParticipant        ChatParticipant[]
  Comment                Comment[]
  Document               Document[]
  LiveSession            LiveSession[]
  LiveSessionParticipant LiveSessionParticipant[]
  Message                Message[]
  Payment                Payment[]
  Testimonial            Testimonial[]
}

enum ChatType {
  PRIVATE
  GROUP
}

enum DocumentStatus {
  PENDING
  SUBMITTED
  VERIFIED
}

enum PaymentMethod {
  ONLINE
  OFFLINE
}

enum PaymentStatus {
  PENDING
  PAID
}

enum Role {
  STUDENT
  ADMIN
  EMPLOYEE
}

enum SessionStatus {
  UPCOMING
  COMPLETED
}
